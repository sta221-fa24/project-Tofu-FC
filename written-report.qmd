---
title: "Mushroom Edibility Analysis"
author: "Tofu-FC - Huiwen Wang, Rocky Zhang, Darrick Zhang"
date: "10,28,24"
format: pdf
execute: 
  warning: false
  message: false
  echo: false
editor: visual
bibliography: references.bib
---

```{r}
#| label: Load Packages and Data

library(tidyverse)
library(tidymodels)
library(dbplyr)
library(knitr)
library(GGally)
library(gridExtra)
library(grid)
library(kableExtra)
library(Stat2Data)
library(patchwork)
library(caTools) # might need to install
library(rms)

mushrooms <- read.csv2("data/mushrooms_dataset.csv")

# Make Quantitative data numerical
mushrooms$cap.diameter <- as.numeric(mushrooms$cap.diameter)
mushrooms$stem.height <- as.numeric(mushrooms$stem.height)
mushrooms$stem.width <- as.numeric(mushrooms$stem.width)

# Convert the response variable to binary (e = 0, p = 1)
mushrooms <- mushrooms |>
  mutate(
    class_binary = ifelse(mushrooms$class == "e", 0, 1)
  )

# Simplified some categorical variables
mushrooms <- mushrooms |>
  mutate(
    stem.color.modified = case_when(
      stem.color %in% c("w", "y", "n") ~ stem.color, TRUE ~ "Other"),
    habitat.modified = case_when(
      habitat %in% c("d", "g") ~ habitat, TRUE ~ "Other")
  )

# Simplified some more categorical variables to remove N/A in interactive model
mushrooms <- mushrooms |>
  mutate(
    cap.shape.modified = case_when(
      cap.shape %in% c("f", "s", "x", "b") ~ cap.shape, TRUE ~ "Other"),
    stem.color.modified = case_when(
      stem.color %in% c("w", "y", "n") ~ stem.color, TRUE ~ "Other"),
    cap.color.modified = case_when(
      cap.color %in% c("n", "w") ~ cap.color, TRUE ~ "Other"),
    #Not necessary because there are no N/A, but this is better for human use
    gill.color.modified = case_when(
      gill.color %in% c("w", "y", "n", "p","f") ~ gill.color, TRUE ~ "Other"),
    season.modified = case_when(
      season %in% c("a", "w") ~ season, TRUE ~ "Other"),
    #Make w the baseline for gill.color.modified so we can see f
    gill.color.modified = fct_relevel(gill.color.modified, "w")
  )

#Split data into train and test
set.seed(123)  # for reproducibility
split <- sample.split(mushrooms$class_binary, SplitRatio = 0.7)
train_data <- subset(mushrooms, split == TRUE)
test_data <- subset(mushrooms, split == FALSE)
```

## Introduction

### Project Motivation / Background:

Mushrooms play a crucial role in maintaining the health and balance of ecosystems worldwide. As nature's decomposers, they break down organic matter and facilitate nutrient cycling in the soil, making essential elements available for other organisms. These fascinating fungi also serve as a nutritious food source for humans and various wildlife, offering valuable proteins, vitamins, and minerals. However, it's important to note that while many mushroom species are beneficial, some can be deadly poisonous, making proper identification and caution essential when encountering wild mushrooms.

The importance of this research has been highlighted in a multitude of studies. There have been over 130,000 reported cases of mushroom exposure from 1999 to 2016, with 704 of these incidents causing "major harm" and 52 being fatal [@brandenburgward2018]. Many of these cases are caused by the misidentification of edible mushroom species, and thus may be preventable through more accurate mushroom classification.

Thus, our research will focus on what physical features and environmental factors of mushrooms humans foragers can use to identify toxic/poisonous mushrooms in the wild. For example, mushrooms in the wild with obvious physical features like white gills, white rings, red caps, or red stems tend to be poisonous. These obvious physical traits are more likely to be spotted by animals, which would provide an evolutionary disadvantage unless they contain certain self-defense mechanisms, such as poison or toxins.

Additionally, the habitat and season in which mushrooms are planted and grow may also affect whether they're poisonous. Different temperatures, humidity, and light can affect the production of toxins, which may also affect the edibility of mushrooms. By conducting a research study on how to distinguish between safe and dangerous species, we can mitigate the incidence of mushroom poisoning and ensure safer foraging practices.

### Research Question:

What environmental factors and/or physical features of mushrooms indicate that a wild mushroom is poisonous or edible?

### Data Description:

The dataset we used is an expansion of the UCI mushroom dataset, curated and submitted on April 26, 1987 by the National Audubon Society Field Guide. The publisher of the Field Guide, National Audubon Society, conducted extensive field research throughout North America, recording their observations on various aspects of mushrooms. Their research incorporate a wide range of physical characteristics, as well as environmental factors such as the type of habitat and seasonal variations. Importantly, the study also focused on the toxicity of the mushrooms, noting which species were poisonous. In 2020, an effort was made to expand the data, capturing data from 173 species of mushrooms (as opposed to the original 23 species). This comprehensive dataset provides valuable insights into the relationship between mushrooms and their environments, contributing significantly to the understanding of the factors influencing mushroom toxicity.

Our response variable is `class`, which is a qualitative variable labeled "e" for edible or "p" for poisonous.

Because we want our classifier to be easily used by people, and quantitative predictors can be harder to measure, we will focus on only one. That is `cap.diameter`, the diameter of the mushroom cap (cm).

Key qualitative predictor variables include `cap.shape` (the shape of the mushroom cap), `gill.color` (the color of the fungi gills), `stem.color`(the color of the mushroom stem), `habitat` (the habitat that the mushroom is grown/found), and `season` (the season that the mushroom is grown/found). The key for the levels of each categorical variable are described on the following page and in the data dictionary.

The data dictionary can be found [here](https://github.com/sta221-fa24/project-Tofu-FC/blob/main/data/README.md) [@wagnerheiderhattab2021]. There are 61069 total primary observations, each row represent a mushroom's physical features and also the environment it was found in. For the purpose of this project, the data was split into training (70%) and testing data (30%). Distribution of testing and training distribution was determined by the lack of data of specific combinations of mushroom's features seen later on in this analysis.

## Exploratory Data Analysis

We will first look at our response variable:

```{r}
#| label: Table of Distribution of Classes
mushrooms |>
  count(class) |>
  mutate(percentage = round(n / sum(n),3)) |>
  kable(digits=3, caption = "Distribution of Classes") |>
  kable_minimal(font_size = 8)
```

```{r, eval=FALSE}
#| label: Univariate Response Variable, Summary Statistics

#EDA Response (Categorical) Variable
ggplot(mushrooms, aes(x = class, fill = class)) +
  geom_bar() +
  theme_minimal() +
  labs(
    title = "Distribution of Edibility/Classes of Mushrooms",
    x = "Class",
    caption = "44.5% are edible, 55.5% are poisonous"
  ) +
  geom_text(stat='count', aes(label=..count..), vjust=-0.5)

# Summary Statistics
# mushrooms |>
#  group_by(class) |>
#  summarise(
#    count = n(),
#    percentage = (count / nrow(mushrooms)) * 100
#  ) |> kable(digits=3)
```

Looking at the overall distribution of our response variable `class`, most of the mushrooms in our dataset seem to be poisonous ("p"). 33888 (55.5% ) of the observations are labeled poisonous, as opposed to 27181 (44.5%) of them as edible.

```{r, eval=FALSE}
#| label: Multicolinearity

mushrooms |>
  select(cap.diameter, stem.height, stem.width) |>
  ggpairs()

mushrooms |>
  summarise(min = min(cap.diameter), 
            q1 = quantile(cap.diameter, 0.25), 
            median = median(cap.diameter),
            q3 = quantile(cap.diameter, 0.75), 
            max = max(cap.diameter),
            mean = mean(cap.diameter),
            sd = sd(cap.diameter)) |>
  kable(digits = 3, 
        caption = "cap diameter summary statistics")

mushrooms |>
  summarise(min = min(stem.height), 
            q1 = quantile(stem.height, 0.25), 
            median = median(stem.height),
            q3 = quantile(stem.height, 0.75), 
            max = max(stem.height),
            mean = mean(stem.height),
            sd = sd(stem.height)) |>
  kable(digits = 3,
        caption = "stem height summary statistics")

mushrooms |>
  summarise(min = min(stem.width), 
            q1 = quantile(stem.width, 0.25), 
            median = median(stem.width),
            q3 = quantile(stem.width, 0.75), 
            max = max(stem.width),
            mean = mean(stem.width),
            sd = sd(stem.width)) |>
  kable(digits = 3,
        caption = "stem width summary statistics")

# OLD Narrative:
# We were first interested in seeing the relationship between our continuous, quantitative variables. While not totally linear, with correlations of $0.423$ and $0.436$, they graphs seem to be somewhat linear, with some redundancy in their information. Thus, for the rest of the EDA we will focus mainly on visualizing cap.diameter. We may consider adding them back for the final model, but were more interested in seeing some of the EDA with the categorical variables. The mean cap diameter is 6.734cm, with a SD of 5.265cm. The mean stem height is 6.582cm, with a SD of 3.37cm. The mean stem width is 12.149cm, with a SD of 10.036cm.
```

```{r,fig.width=6, fig.height=2.5}
#| label: Univariate Quantitative Predictor

# mushrooms |>
#   ggplot(aes(x = cap.diameter)) + 
#   geom_density(fill = "skyblue", alpha = 0.7) +
#   labs(title = "Kernel Density Plot of cap diameter",
#        x = "Cap diameter (cm)",
#        y = "Density")

ggplot(mushrooms, aes(x = cap.diameter)) +
    geom_histogram(fill = "skyblue", alpha = 0.9) +
  geom_vline(xintercept=mean(mushrooms$cap.diameter), color="red") +
    theme_minimal() +
    labs(title = "Distribution of Cap Diameter",
         x="Cap diameter",
         y="Count")
```

```{r, eval=FALSE}
#| label: Cap Diameter Summary Stats
mushrooms |>
  summarise(min = min(cap.diameter), 
            q1 = quantile(cap.diameter, 0.25), 
            median = median(cap.diameter),
            q3 = quantile(cap.diameter, 0.75), 
            max = max(cap.diameter),
            mean = mean(cap.diameter),
            sd = sd(cap.diameter)) |>
  kable(digits = 3, 
        caption = "cap diameter summary statistics")
```

From the visualization, the distribution of cap diameter appears roughly unimodal and skewed right. The mean cap diameter is 6.734 cm, with a standard deviation of 5.265 cm.

For the rest of qualitative predictors, we report some in the tables below:

```{r}
#| label: Rest of the Qualitative Predictors

# Define category codes
codes <- list(
  cap_shape = c("bell", "conical", "flat", "other", "spherical", "sunken", "convex"),
  cap_color = c("buff", "red", "gray", "black", "blue", "brown", "orange", "pink", "green", "purple", "white", "yellow"),
  stem_color = c("buff", "red", "none", "gray", "black", "blue", "brown", "orange", "pink", "green", "purple", "white", "yellow"),
  gill_color = c("buff", "red", "none", "gray", "black", "brown", "orange", "pink", "green", "purple", "white", "yellow"),
  habitat = c("woods", "grasses", "heaths", "leaves", "meadows", "paths", "urban", "waste"),
  season = c("autumn", "spring", "summer", "winter")
)

# Function to create distribution table
create_dist_table <- function(data, variable, codes, caption) {
  temp_data <- data |>
    count({{variable}}) |>
    mutate(percentage = round(n / sum(n), 3))
  
  rotated_data <- as.data.frame(t(temp_data[, -2]))
  colnames(rotated_data) <- codes
  rownames(rotated_data) <- rownames(rotated_data)
  
  rotated_data |> 
    kable(digits = 3, caption = caption) |>
    kable_styling(font_size = 6.5)
}
```

For `cap_shape`:
```{r}
#| label: cap_shape
# Create tables
create_dist_table(mushrooms, cap.shape, codes$cap_shape, 
                 "Distribution of Mushroom Cap Shapes")
```

For `habitat`:
```{r}
#| label: habitat

create_dist_table(mushrooms, habitat, codes$habitat, 
                 "Distribution of Mushroom Habitats")

```

For `season`:
```{r}
#| label: season
create_dist_table(mushrooms, season, codes$season, 
                 "Distribution of Mushroom Seasons")

```

For `stem_color`:
```{r}
#| label: stem_color
create_dist_table(mushrooms, stem.color, codes$stem_color, 
                 "Distribution of Mushroom Stem Colors")
```

For qualitative variables, there appears to be more common physical and environmental characteristics. For example, for cap shape, flat and convex tends to be the most common; for stem color the most common is white, yellow, and brown; for habitat, woods is the most common. Thus, there are also characteristics which happen to be rarer, yet for some reasons, natural selection has decided to preserve. These characteristics may have evolutionary advantages (such as being poisonous), and we hope that they help us in our logistic regression model.

```{r, fig.width = 8, fig.height = 3.5}
#| label: Bivariate EDA
g1 <- ggplot(mushrooms, aes(x = cap.diameter, color = class)) +
    geom_boxplot() +
    theme(legend.title = element_blank()) +
    labs(title = "Response vs cap diameter",
         x = "Cap diameter")
g2 <- ggplot(mushrooms, aes(x = cap.shape, fill = class)) +
    geom_bar(position = "dodge") +
    theme(legend.title = element_blank()) +
    labs(title = "Response vs cap shape",
         x = "Cap shape")
g3 <- ggplot(mushrooms, aes(x = gill.color, fill = class)) +
    geom_bar(position = "dodge") +
    theme(legend.title = element_blank()) +
    labs(title = "Response vs gill color",
         x = "Gill color")
# g3 <- ggplot(mushrooms, aes(x = stem.root, fill = class)) +
#     geom_bar(position = "dodge") +
#     labs(title = "Response vs stem root")
g4 <- ggplot(mushrooms, aes(x = stem.color, fill = class)) +
    geom_bar(position = "dodge") +
    theme(legend.title = element_blank()) +
    labs(title = "Response vs stem color",
         x ="Stem color")
g5 <- ggplot(mushrooms, aes(x = habitat, fill = class)) +
    geom_bar(position = "dodge") +
    theme(legend.title = element_blank()) +
    labs(title = "Response vs habitat",
         x = "Habitat")
g6 <- ggplot(mushrooms, aes(x = season, fill = class)) +
    geom_bar(position = "dodge") +
    theme(legend.title = element_blank()) +
    labs(title = "Response vs season",
         x = "Season")

# grid.arrange(g1,g2,g3,g4,g5,g6,bottom = textGrob("cap shape: bell=b, conical=c, convex=x, flat=f, sunken=s, spherical=p, others=o
# colors: brown=n, buff=b, gray=g, green=r, pink=p, purple=u, red=e, white=w, yellow=y, blue=l, orange=o, black=k
# habitat: grasses=g, leaves=l, meadows=m, paths=p, heaths=h, urban=u, waste=w, woods=d
# season: spring=s, summer=u, autumn=a, winter=w",
#                                                  gp = gpar(fontsize = 8)))

grid.arrange(g1,g2,g3,g5)
```

Looking at this bivariate exploratory data analysis, smaller cap diameters seem to be correlated with poisonous mushrooms on average. We also observe some categories with a large disparity between the number of edible and number of poisonous mushrooms, offering potential modeling power. For example, if we randomly select a mushroom with a cap shape of convex, bell, or others, it is more likely to be poisonous/toxic than edible. Similarly, mushrooms with gill color of brown and yellow tends to be poisonous. In many cases, however, it is hard to accurately predict whether a mushroom is edible or poisonous soley based on a single characteristic. This suggests that our model needs to incorporate multiple predictors and/or interaction terms.

One interaction term we discovered is `habitat*season`. Mushrooms growing in the same habitat may have different toxicity depending on whether poisonous is needed to defend against predators. As the number of predators varies by season, season can alter how habitat affects the log-odds of mushroom toxicity.

```{r, fig.width=8, fig.height=3.5}
#| label: Analysis of interaction

ggplot(mushrooms, aes(x = habitat, fill = class)) +
  geom_bar(position = "fill") + 
  facet_wrap(~ season) +
  labs(title = "Edibility Distribution by Habitat and Season",
       x = "Habitat",
       y = "Proportion of Edibility",
       fill = "Class") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

From the graph, mushrooms in certain habitats might only be edible during specific seasons. For example, mushrooms in the meadows are edible exclusively in the winter, but may be poisonous in other. Thus, we should incorporate this interaction term into our final model.

```{r, fig.width=8, fig.height=4}
#| label: Heatmap for Interaction Term EDA

mushroom_prop <- mushrooms |>
  group_by(cap.color, cap.shape) |> 
  dplyr::summarise(edible_count = sum(class == "e"),
            poisonous_count = sum(class == "p")) |>
  mutate(proportion_e_to_p = edible_count / poisonous_count) |>
  select(cap.color, cap.shape, proportion_e_to_p)
mushroom_prop <- mushroom_prop |>
  mutate(log_prop = log(proportion_e_to_p))


ggplot(mushroom_prop, aes(x = cap.color, y = cap.shape, 
                          fill = log_prop)) +
  geom_tile() +
  labs(title = "Cap Color and Shape Combinations by Edibility",
       subtitle = "Using log ratios of edible to poisonous mushrooms",
       x = "Cap Color",
       y = "Cap Shape",
       fill = "log(e/p)") +
  geom_tile(data = mushroom_prop |> filter(log_prop == -Inf),
            aes(y = cap.shape, x = cap.color),
            fill = "firebrick1") +
  geom_tile(data = mushroom_prop |> filter(log_prop == Inf),
            aes(y = cap.shape, x = cap.color),
            fill = "darkseagreen2") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + 
  geom_text(aes(label = case_when(
                          log_prop == Inf ~ "e",
                          log_prop == -Inf ~ "p",
                          TRUE ~ as.character(round(log_prop, 1))),
                color = case_when(
                          log_prop == Inf ~ "always edible",
                          log_prop == -Inf ~ "always poisonous",
                          TRUE ~ "other")),
            show.legend = TRUE) +
  scale_color_manual(values = c("always edible" = "darkseagreen2", 
                                "always poisonous" = "firebrick1", 
                                "other" = "black"),
                     name = "Edibility")
```

As the heatmap shows, certain combinations of cap color and cap shape are always edible or poisonous. Additionally, the log ratios across combinations of cap colors and cap sizes are varied with no pattern – for a mushroom with a sunken cap shape, it could be always edible (if the color is buff) to always poisonous (if the color is red). Similarly, if a mushroom is brown, it could be high likely it is edible (if the cap shape is conical) or likely it is poisonous (if the cap shape is bell). Thus, we may have to consider this interaction effect in our final model.

## Methodology/Analysis

### Model Assumption
Since we try to predict a binary outcome (edible or poisonous), we use a logistic regression model. Below are the assumptions necessary for a logistic regression fit.

-   Linearity: The log-odds appears to have a linear relationship with the quantitative predictor (see appendix for empirical logit plot).

-   Randomness: The data were curated randomly in different places in North America, and thus we assume this condition is met.

-   Independence: The observations are collected over a period of time, but in different regions and locations. For our analysis we assumed independence was met as the period did not span several years.

### Base Model
We fit a logistic regression model predicting the binary response `class_binary` using predictors `cap.diameter`, `season`, `cap.shape`, `cap.color`, `gill.color`, `stem.color`, `habitat`. We chose predictors based on both the EDA and how easy they're to understand and evaluate. To determine if any predictors may not useful, we looked at model's coefficients with p-values greater than 0.01 (see Table 8 in the appendix).

```{r}
#| label: Initialize Base Model
main_model <- glm(class_binary ~ cap.diameter + season + cap.shape + cap.color +
                    gill.color + stem.color + habitat, 
                    data = mushrooms, family = "binomial")
```

The Wald's Significance Tests for coefficients of multiple categories of the same predictor variables reveals that certain categories only have limited data (also showen in EDA) and/or limited predictive power. For the simplicity of model, we combine these categories into a general "Other" category. For example, `stem.color` of "w", "y", and "n" were kept while the other observations were assigned to a general "Other" category. For `habitat`, "d" and "g" were kept.

Running a likelihood ratio test to evaluate the overall significance of the coefficients of the new model with modified categorical variables replaced `stem.color` and `habitat` with `stem.color.modified` and `habitat.modified`, we have:

```{r}
#| label: Overall Significance F Test Redone with Modified Categoricals (Likelihood Ratio Test)
null_model <- glm(class_binary ~ 1, data = mushrooms, family = "binomial")
main_model_modified <- glm(class_binary ~ cap.diameter + season + cap.shape + cap.color +
                    gill.color + stem.color.modified + habitat.modified, 
                    data = mushrooms, family = "binomial")
#(L_0 <- glance(null_model)$logLik)
#(L_a <- glance(main_model_modified)$logLik)
#(G <- -2 * (L_0 - L_a)) #LRT test statistic
#(p_value <- pchisq(G, df = 3, lower.tail = FALSE))

temp <- anova(null_model, main_model_modified, test = "Chisq") |> 
  tidy() 
temp[2,1] = "our model"
temp |> select(-df.residual) |>
  kable(digits = 3)
```
\vspace{-1em}
$$
H_0: \beta_1,...,\beta_p = 0 \hspace{3cm} H_a: \beta_j \neq 0 \ for\ at\ least\ 1\ j
$$ Since the p-value is small, and less than $\alpha = 0.05$, we reject $H_0$. The data provide sufficient evidence of at least one non-zero coefficient in the model. The model coefficients and corresponding Wald test inferential statistics for our main model provide better p-value than the unmodified base model (see Table 10 in the appendix).

### Interactive Terms

Our EDA showed evidence of potential interaction terms. To determine the need for them in our model, we performed a drop in deviance test with the added interaction terms of `habitat*season` and `cap.shape*cap.color`.

```{r}
#| label: Drop-in-deviance Test

full_model <- glm(class_binary ~ cap.diameter + season + cap.shape + cap.color +
                    gill.color + stem.color.modified + habitat.modified + habitat.modified*season + 
                    cap.shape*cap.color,
                    data = mushrooms, family = "binomial")

temp <- anova(main_model_modified, full_model, test = "Chisq") |> 
  tidy() |> 
  select(-df.residual) 


temp[1,1] = "reduced model"
temp[2,1] = "full model (w/ interaction)"
temp |>
  kable(digits = 3)

full_model_modified <- glm(class_binary ~ cap.diameter + season.modified + cap.shape.modified + cap.color.modified +
                    gill.color.modified + stem.color.modified + habitat.modified + habitat.modified*season.modified + 
                    cap.shape.modified*cap.color.modified,
                    data = mushrooms, family = "binomial")
```

Since the p-value is low below $\alpha = 0.05$, we decide to include these interaction terms as there is convincing evidence that at least one of these interactive term coefficients are not 0 and thus helpful in the model. Additionally for the base model, the BIC is `{r} glance(main_model_modified)$BIC |> signif(digits=3)`, whereas for the model with interaction effects, the BIC is `{r} glance(full_model)$BIC |> signif(digits=3)`, also suggesting we should include the interaction terms (lower BIC). However, a lot of the coefficients for the interactive terms are N/A's and we run into the same issue as the main effects model (no/lack of data values for particular interaction combinations). We transformed the rest of the categorical variables and the coefficients looked way better (observe Table 11 vs. Table 12 in the appendix).

## Model Results
### Final Model
Our final model is a logistic regression model predicting the binary response variable `class_binary` as a function of the following predictors: `cap.diameter`, `season.modified`, `cap.shape.modified`, `cap.color.modified`, `gill.color.modified`, `stem.color.modified`, `habitat.modified`, `habitat.modified`\*`season.modified`, and `cap.shape.modified` \*`cap.color.modified`. Full model coefficients can be seen in the appendix (Table 12).

Below highlight some interesting coefficients for foragers to use to help them identify mushrooms that are more likely to be edible. Note the intercept is not useful in context since a mushroom cannot have a cap diameter of 0 cm.

-   The coefficient for cap diameter is -0.064, which means that for each 1 cm increase in the cap diameter, we expect the odds of the mushroom being poisonous multiplies by a factor of 0.938, holding all else constant. Broadly speaking, the larger the cap diameter is the less likely the mushroom is poisonous.

-   The coefficient for cap shape f is -1.508, suggesting that for mushrooms with a flat cap shape (labled "f"), we expect the odds of the mushroom being poisonous are 0.221 times the odds of being poisonous for mushrooms of bell shaped (baseline), granted all else are held constant (AOR = 0.221. The odds of the mushroom being poisonous decrease significantly when the cap shape is "p" compared to the baseline. As shown in bivariate EDA, the mushroom tends to be poisonous when cap shape is "bell."

-   The coefficient for season(w) \* habitat.modified(g) is -0.968. This indicates that the combination of specific season (winter) and habitat (grasses) conditions modifies the expected odds of the mushroom being poisonous by a multiplicity factor of 0.380 times the odds of the mushroom being poisonous through an additive model of the same combination, while holding all other variables constant. This trend can be seen in the interactive term EDA as when season is winter and habitat is grasses we are more likely to observe an edible mushroom.

### Model Evaluation

```{r, fig.height=1.5}
#| label: ROC Curve 1
test_data$class_binary <- as.factor(test_data$class_binary)
predicted_values <- predict(full_model_modified, test_data, type = "response")
test_data <- test_data |> 
  mutate(pred_prob = predicted_values)

roc_curve_data <- test_data |>
  roc_curve(class_binary, pred_prob, event_level = "second")
plt1 <- autoplot(roc_curve_data) + ggtitle("ROC Curve")
```

```{r, eval=FALSE}
#| label: AUC 1
test_data_aug <- augment(full_model_modified, newdata = test_data)
test_data_aug$class_binary <- as.factor(test_data_aug$class_binary)
test_data_aug |>
  roc_auc(class_binary, .fitted, event_level = "second")
```

```{r, eval=FALSE}
#| label: Finding Threshold 1
roc_curve_data |>
  filter(sensitivity <= 0.9501) |>
  head(n=2)
```

```{r, fig.height=3}
#| label: Confusion Matrix 1

threshold <- 0.294
test_data <- test_data |> 
  mutate(
    pred_class = case_when(
      pred_prob < threshold ~ 0,
      TRUE ~ 1
    )
  )

test_data$pred_class <- as.factor(test_data$pred_class)
conf_mat <- test_data |>
  yardstick::conf_mat(class_binary, pred_class)
plt2 <- autoplot(conf_mat, type = "heatmap") +
  labs(
    title = "Confusion matrix",
    subtitle = "p=0.294 (0-edible; 1-poisonous)"
  )

plt1 + plt2
```

The final interactive model was evaluated with the testing data. The model is better than guessing but still not super great as the AUC is 0.728 which is right in between 1 and 0.5. We decided on a threshold of p = 0.294 to achieve a sensitivity of 95%, since we wanted to prioritize minimizing false negatives, which are more expensive – better to be careful than eat a poisonous mushroom classified as "edible".

Using this threshold, we can evaluate our model's performance with a confusion matrix. As desired, for poisonous mushrooms, we are able to successfully classify 95% of them as poisonous. Our model struggles at correctly identifying mushrooms which are actually edible as edible, with a false positive rate of \~81%. We were able to build a model that overall does much better (see appendix). However, this model requires many more predictors and becomes much more complex. For the purposes of this model, we wanted it to be applicable even in situations where humans found themselves having to assess edibility without many special tools or knowledge. Moreover, the initial interactive model also produced slightly better results but becomes harder to use in context for human foragers (see appendix).

## Discussion + Conclusion

There are many other significant predictors that helps in the identification of mushroom edibility, but among those that are most useful and interpretable, cap shape, gill color, cap diameter, cap color, and their interactions (e.g., habitat × season, cap shape × cap color) speak the most on the probability of a mushroom being poisonous. We believe keeping a simple, parsimonious model with a high sensitivity was best for the context of our model's usefulness. Foragers should be able to use the model to help identify mushroom edibility. For example, the interaction of winter (season) and grasses (habitat) reduces the odds of toxicity significantly. In general, mushrooms present in the winter seem less likely to be toxic. Further, larger cap diameters are generally associated with lower odds of being poisonous. The presence of any gill color besides "none" increases the odds of the mushroom being poisonous.

The final interactive model performed decently with an AUC of 0.728, achieving 95% sensitivity with a threshold of p = 0.294. However, while the final interactive model seems to be useful, there are many benefits using each type of model. For example, the final main effects model may be more useful in context due to relatively few terms and its interpretability (Table 10). In comparison, on the other end of the spectrum, the interactive with less modified coefficients has the best AUC, but high p-values and N/A's likely because of the scarcity in data of specific combinations, and so some of these predictors may not be use in practice (Table 11). In the middle of the spectrum is the final interaction model that takes account of simplicity, due to the transformation of categorical variables to include only the most common features/environment, and produces a somewhat decent AUC (Table 12).

One limitation of our model is the high false positive rate, due to our decision to limit false negatives and improve safety for foragers. However, if a population of people are reliant on mushrooms as a critical food source, they may wish to be more liberal with classifying mushrooms as edible. Other limitations arise from the data, where some categories (e.g., rare gill, stem colors, and combinations of characteristics and environmental features) have sparse data. For these categories, we sometimes see high multicolinearity after running a VIF test (shown in appendix), which ends up inflating variances, biasing coefficients, and leading to predictors having coefficients with high p-values. Thus, some of these end up being very unreliable predictors. Further, the data is limited in how it represents mushrooms – the data is not able to represent mushrooms with features within the same category that occur simultaneously. For example, a mushroom's cap may be multiple colors, or its cap may be both shiny and smooth, but the dataset would only captures on of these characteristics. Lastly, the independence of observations for model assumption is assumed but not explicitly verified.

Our analysis could be improved by addressing these concerns with sparse data and high multicollinearity. While it's unclear if the high multicollinearity for some of the categories is a direct cause of the sparse data, it would be immensely helpful to expand the dataset to improve data balance for rare categories through targeted sampling. If multicollinearity still exists, it may be simply because dependencies simply exist in the population (ie, certain gill colors are associated with certain cap colors).

Further, our analysis may benefit from exploring other statistical techniques. The original paper the 2020 data was from found that the expanded dataset was not linearly separable, and so it would have been impossible to perfectly classify mushroom edibility through logistic regression [@wagnerheiderhattab2021]. They were able to achieve nearly perfect classification using random forests, so it may be worth leveraging similar techniques which can handle non-linear relationships while also remaining interpretable to see if we can achieve better prediction than our current model. For reference, their logistic regression model achieved an AUC of 0.85, but was more complex than ours. Unfortunately, the paper does not show their logistic regression model output (for comparison to ours), likely because the paper was mainly about expanding the dataset.

Future studies should also test the model with mushrooms from other regions or under different environmental conditions to assess robustness. Future applications of our model may also be possible to integrate our model with technology, with mobile applications that allow for real-time classification using the model. This may also allow for more complex models, if mobile devices are able to identify and measure characteristics which might be harder for humans. Finally, future works should focus on collaborating with public health organizations to create user-friendly guides or alerts for foragers, helping to make the model helps keep people safe.

\pagebreak

## Appendix

```{r, fig.width=8, fig.height=9}
#| label: Full Univariate Predictors

p1 <- ggplot(mushrooms, aes(x = cap.diameter)) +
    geom_histogram() +
  geom_vline(xintercept=mean(mushrooms$cap.diameter), color="red") +
    theme_minimal() +
    labs(title = "Distribution of cap diameter",
         x="Cap diameter",
         caption = "mean: 6.734; SD: 5.265")
p2 <- ggplot(mushrooms, aes(x = cap.shape)) +
    geom_bar() +
    theme_minimal() +
    labs(title = "Cap shape",
         x="Cap shape")
p3 <- ggplot(mushrooms, aes(x = gill.color)) +
    geom_bar() +
    theme_minimal() +
    labs(title = "Gill color",
         x="Gill color")
p4 <- ggplot(mushrooms, aes(x = stem.color)) +
    geom_bar() +
    theme_minimal() +
    labs(title = "Stem color",
         x="Stem color")
p5 <- ggplot(mushrooms, aes(x = habitat)) +
    geom_bar() +
    theme_minimal() +
    labs(title = "Habitat",
         x="Habitat")
p6 <- ggplot(mushrooms, aes(x = season)) +
    geom_bar() +
    theme_minimal() +
    labs(title = "Season",
         x="Season")
grid.arrange(p1,p2,p3,p4,p5,p6,
              bottom = textGrob("cap shape: bell=b, conical=c, convex=x, flat=f, sunken=s, spherical=p, others=o
colors: brown=n, buff=b, gray=g, green=r, pink=p, purple=u, red=e, white=w, yellow=y, blue=l, orange=o, black=k
habitat: grasses=g, leaves=l, meadows=m, paths=p, heaths=h, urban=u, waste=w, woods=d
season: spring=s, summer=u, autumn=a, winter=w", 
                                                 gp = gpar(fontsize = 8)))
```

Here is our original univariate EDA with the full visualizations.

\pagebreak

```{r}
#| label: VIF
vif(main_model_modified)
```

Above is the output from the `vif()` function ran on our main effects model. There are a few categories with high VIF (\>10), particularly some of the gill colors and cap colors, suggesting they may be correlated. This may be the result of low data for those specific gill colors and cap colors.

\pagebreak

```{r}
#| label: Multivariate EDA
ggplot(mushrooms, aes(y = stem.height, x = stem.width, color = class)) +
  geom_point() +
  labs(
    title = "Distribution of Stem Height vs. Stem Width Among Different
    Edibility Classes",
    y = "Stem Height (cm)",
    x = "Stem Width (cm)",
    color = "Class (Edibile or Not)"
  ) +
  theme_minimal()
```

Here, we look at multivariate exploratory data analysis including 2 predictors and our response variable. We visualize the effect of both stem width and stem height on the response variable, class. Interestingly, it seems like mushrooms with either high stem width or stem height seem to be edible. This suggests there may be some potential interaction effects between stem height and stem width – the low value of one alone does not seem to predict if the mushroom is poisonous, but requires the low value of both. However, in our model when we added this interaction effect, the performance did not improve that drastically, and we deemed it more important to keep the model parsimonious as possible. Additionally, quantitative features can be hard to measure, and so may be less practical when serving as a general guideline for foraging mushrooms.

\pagebreak

```{r}
#| label: Emperical Logit

# Cap diameter analysis
emplogitplot1(class_binary ~ cap.diameter, data = train_data, 
              ngroups = 20)

# Cap shape analysis
train_data |>
  count(class_binary, cap.shape) |>
  group_by(cap.shape) |>
  mutate(prop = n / sum(n)) |>
  filter(class_binary == "1") |>
  mutate(emp_logit = log(prop / (1 - prop))) |>
  ungroup()

# Gill color analysis
train_data |>
  count(class_binary, gill.color) |>
  group_by(gill.color) |>
  mutate(prop = n / sum(n)) |>
  filter(class_binary == "1") |>
  mutate(emp_logit = log(prop / (1 - prop))) |>
  ungroup()

# Stem color analysis
train_data |>
  count(class_binary, stem.color.modified) |>
  group_by(stem.color.modified) |>
  mutate(prop = n / sum(n)) |>
  filter(class_binary == "1") |>
  mutate(emp_logit = log(prop / (1 - prop))) |>
  ungroup()

# Habitat analysis
train_data |>
  count(class_binary, habitat.modified) |>
  group_by(habitat.modified) |>
  mutate(prop = n / sum(n)) |>
  filter(class_binary == "1") |>
  mutate(emp_logit = log(prop / (1 - prop))) |>
  ungroup()

# Season analysis
train_data |>
  count(class_binary, season) |>
  group_by(season) |>
  mutate(prop = n / sum(n)) |>
  filter(class_binary == "1") |>
  mutate(emp_logit = log(prop / (1 - prop))) |>
  ungroup()
```

Here is the calculated empirical logit plot for our only quantitative predictor variable and it appears to generally fit the linearity assumption. For the other qualitative predictor variables the empirical logic was calculated for the training dataset.

\pagebreak

```{r}
#| label: Tidy Table for Base Model
main_model |>
  tidy() |>
  filter(p.value > 0.01) |>
  kable(digits = 3, caption = "Base Main Model Coefficients Filtered")
```

The base model tidy output with coefficients that have a p.value \> 0.01 is shown here. To address these high p-value we collapsed some of the categorical variables into less levels.

\pagebreak

```{r}
#| label: More Interaction Variables and Model Comparison

full_model2 <- glm(class_binary ~ cap.diameter + season + cap.shape + cap.color +
                    gill.color + habitat + stem.root*stem.color + veil.type + veil.color +
                     has.ring + ring.type +
                     cap.shape*cap.color + habitat*season,
                   data = mushrooms, family="binomial")
full_model3 <- glm(class_binary ~ cap.diameter + season + cap.shape + cap.color +
                     gill.color + habitat + stem.root*stem.color + veil.type + veil.color + 
                     has.ring*ring.type +gill.attachment*gill.spacing+
                     cap.shape*cap.color + habitat*season,
                   data = mushrooms, family="binomial")
anova(full_model2, full_model3, test = "Chisq") |> 
  tidy() |> 
  kable(digits = 3, escape = TRUE, caption = "ANOVA Table for Drop-in-Deviance Test") |> 
  kable_styling(font_size = 8) |> 
  column_spec(1, width = "3cm")

aic_model2 <- glance(full_model2)$AIC
aic_model3 <- glance(full_model3)$AIC
bic_model2 <- glance(full_model2)$BIC
bic_model3 <- glance(full_model3)$BIC

cat("The AIC for the first model is: ", round(aic_model2, 2), "\n",
    "while the AIC for the second model is: ", round(aic_model3, 2), ".\n",
    "The BIC for the first model is: ", round(bic_model2, 2), "\n",
    "and the BIC for the second model is: ", round(bic_model3, 2), ".\n")
```

Here, we played with adding more predictors to our model. We do achieve better ROC curves with these as well, but we decided that a smaller model would still be better, and that many of these predictors that we added here may be hard to identify for the average person.

\pagebreak

```{r}
#| label: Tidy Output for Final Main Model
main_model_modified |>
  tidy() |>
  kable(digits = 3,
        caption = "Final Main Model Coefficients")
```

\pagebreak

```{r}
#| label: Tidy Output for Interactive Model
full_model |>
  tidy() |>
  kable(digits = 3,
        caption = "Interactive Model Coefficients")
```

Interactive effects model's coefficient have a lot that are N/A's and high p-values for Wald test. In comparison the main effects model's coefficient tends to have low p-values for Wald test and enough data for each coefficient (observed in Table 10 above).

\pagebreak

```{r}
#| label: Tidy Output for Final Interactive Model
full_model_modified |>
  tidy() |>
  kable(digits = 3,
        caption = "Final Interactive Model Coefficients")
```

To address N/A values in the interactive model, we decided to transformed the other categorical variables where there were a lack of data on specific combinations of predictor variables (this model has every predictor variable modified except for `cap.diameter`). For cap shape "f", "s", "x", and "b" are kept. For stem color "w", "y", and "n" are kept. For cap color "n" and "w" are kept. For gill color "w", "y", "n", "p", and "f" are kept ("f" was releveled to the baseline). For season "a" and "w" are kept. Features that were kept were collapsed to "Others". For more information on these labels please refer to the data dictionary [here](https://github.com/sta221-fa24/project-Tofu-FC/blob/main/data/README.md).

As seen in the table, there are less coefficients that have high p-values and no coefficients that are N/A's. Additionally, reducing the number of coefficients ultimately helps ease the model use for human foragers. It should be noted that the "Others" category typically has high p-values because they incorporate many different characteristics of mushrooms that can be label as either edible or poisonous (in turn this makes the coefficients for "Others" less relevant in context of applicable use since some characters in others can solely be edible or poisonous). Since most of these have low p-values, we believe the coefficients that have the largest magnitude are the most helpful predictors of edibility.

\pagebreak

```{r, fig.height=3}
#| label: ROC Curve 2
test_data$class_binary <- as.factor(test_data$class_binary)
predicted_values <- predict(full_model, test_data, type = "response")
test_data <- test_data |> 
  mutate(pred_prob = predicted_values)

roc_curve_data <- test_data |>
  roc_curve(class_binary, pred_prob, event_level = "second")
plt3 <- autoplot(roc_curve_data) + ggtitle("ROC Curve")
```

```{r, eval=FALSE}
#| label: AUC 2
test_data_aug <- augment(full_model, newdata = test_data)
test_data_aug$class_binary <- as.factor(test_data_aug$class_binary)
test_data_aug |>
  roc_auc(class_binary, .fitted, event_level = "second")
```

```{r, eval=FALSE}
#| label: Finding Threshold 2
roc_curve_data |>
  filter(sensitivity <= 0.9501) |>
  head(n=2)
```

```{r}
#| label: Confusion Matrix 2
threshold <- 0.247
test_data <- test_data |> 
  mutate(
    pred_class = case_when(
      pred_prob < threshold ~ 0,
      TRUE ~ 1
    )
  )

test_data$pred_class <- as.factor(test_data$pred_class)
conf_mat <- test_data |>
  yardstick::conf_mat(class_binary, pred_class)
plt4 <- autoplot(conf_mat, type = "heatmap") +
  labs(
    title = "Confusion matrix",
    subtitle = "p=0.247 (0-edible; 1-poisonous)"
  )

#grid.arrange(plt1,plt2)
plt3 + plt4
```

This is the ROC curve and confusion matrix for the initial interactive model. The model here is slightly better than our final interactive model as the AUC is 0.797 which is closer to 1 than 0.5. If we keep the sensitivity at 95% the threshold would be p = 0.247. Our confusion matrix here indicates that of poisonous mushrooms, we are able to successfully classify 95% of them as poisonous. It also suggests that our model struggles at correctly identifying mushrooms which are actually edible as edible, with a false positive rate of 73.7%, but still lower than the false positive rate of the final interactive model.

\pagebreak

## References
